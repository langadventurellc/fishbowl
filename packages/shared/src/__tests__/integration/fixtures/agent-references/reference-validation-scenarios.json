{
  "validCrossServiceReferences": {
    "personality_role_model_valid": {
      "name": "Valid Cross-Service Reference Agent",
      "description": "Agent with valid personality, role, and model references across all services",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis", "reporting", "data_processing"],
      "constraints": ["data_privacy", "accuracy_required"],
      "settings": {
        "temperature": 0.7,
        "maxTokens": 2048
      },
      "tags": ["cross-service", "reference-test"],
      "expectedOutcome": "success",
      "validationChecks": [
        "personality_reference_valid",
        "role_reference_valid",
        "model_reference_valid",
        "cross_service_coordination_successful",
        "reference_integrity_maintained"
      ]
    },
    "creative_personality_valid": {
      "name": "Creative Agent with Valid References",
      "description": "Agent with creative personality referencing valid role and model",
      "role": "creative-director",
      "personalityId": "550e8400-e29b-41d4-a716-446655440102",
      "modelId": "claude-3-sonnet",
      "capabilities": ["creative_ideation", "design_thinking", "innovation"],
      "constraints": ["brand_guidelines", "audience_appropriate"],
      "settings": {
        "temperature": 0.9,
        "maxTokens": 3072,
        "topP": 0.95
      },
      "tags": ["creative", "valid-references"],
      "expectedOutcome": "success",
      "validationChecks": [
        "creative_personality_resolved",
        "creative_role_validated",
        "high_creativity_model_compatible",
        "creative_capabilities_matched"
      ]
    },
    "enterprise_security_agent": {
      "name": "Enterprise Security Analyst",
      "description": "Complex enterprise agent with comprehensive cross-service references",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440103",
      "modelId": "gpt-4-32k",
      "capabilities": [
        "security_analysis",
        "threat_assessment",
        "compliance_checking",
        "risk_evaluation"
      ],
      "constraints": [
        "security_clearance_required",
        "audit_trail_mandatory",
        "data_classification_compliance"
      ],
      "settings": {
        "temperature": 0.3,
        "maxTokens": 4096,
        "frequencyPenalty": 0.0,
        "presencePenalty": 0.1
      },
      "tags": ["enterprise", "security", "complex-references"],
      "expectedOutcome": "success",
      "validationChecks": [
        "analytical_personality_validated",
        "security_role_capabilities_matched",
        "enterprise_model_available",
        "security_constraints_enforced",
        "complex_reference_resolution_successful"
      ]
    }
  },
  "invalidReferenceScenarios": {
    "nonexistent_personality": {
      "name": "Invalid Personality Reference Agent",
      "description": "Agent referencing non-existent personality ID",
      "role": "analyst",
      "personalityId": "00000000-0000-0000-0000-000000000000",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis"],
      "constraints": [],
      "settings": {},
      "tags": ["invalid-reference"],
      "expectedOutcome": "reference_error",
      "expectedError": {
        "type": "ReferenceError",
        "field": "personalityId",
        "message": "Referenced personality does not exist",
        "code": "PERSONALITY_NOT_FOUND"
      },
      "validationChecks": [
        "personality_existence_check_failed",
        "cross_service_validation_prevented",
        "appropriate_error_message_generated"
      ]
    },
    "invalid_role_reference": {
      "name": "Invalid Role Reference Agent",
      "description": "Agent referencing non-existent or invalid role",
      "role": "nonexistent-specialist",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["specialized_analysis"],
      "constraints": [],
      "settings": {},
      "tags": ["invalid-role"],
      "expectedOutcome": "reference_error",
      "expectedError": {
        "type": "ReferenceError",
        "field": "role",
        "message": "Referenced role does not exist or is not available",
        "code": "ROLE_NOT_FOUND"
      },
      "validationChecks": [
        "role_existence_validation",
        "role_service_integration_check",
        "error_context_provided"
      ]
    },
    "unavailable_model_reference": {
      "name": "Unavailable Model Reference Agent",
      "description": "Agent referencing model that is not available",
      "role": "generalist",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "unavailable-model-v2",
      "capabilities": ["general_assistance"],
      "constraints": [],
      "settings": {},
      "tags": ["unavailable-model"],
      "expectedOutcome": "reference_error",
      "expectedError": {
        "type": "ReferenceError",
        "field": "modelId",
        "message": "Referenced model is not available or accessible",
        "code": "MODEL_NOT_AVAILABLE"
      },
      "validationChecks": [
        "model_availability_check",
        "model_service_integration",
        "availability_status_verified"
      ]
    },
    "multiple_invalid_references": {
      "name": "Multiple Invalid References Agent",
      "description": "Agent with multiple invalid references for comprehensive error testing",
      "role": "invalid-role",
      "personalityId": "invalid-personality-id",
      "modelId": "nonexistent-model",
      "capabilities": ["invalid_capability"],
      "constraints": ["invalid_constraint"],
      "settings": {},
      "tags": ["multiple-invalid"],
      "expectedOutcome": "multiple_reference_errors",
      "expectedErrors": [
        {
          "type": "ReferenceError",
          "field": "personalityId",
          "message": "Personality ID must be a valid UUID",
          "code": "INVALID_UUID_FORMAT"
        },
        {
          "type": "ReferenceError",
          "field": "role",
          "message": "Referenced role does not exist",
          "code": "ROLE_NOT_FOUND"
        },
        {
          "type": "ReferenceError",
          "field": "modelId",
          "message": "Referenced model is not available",
          "code": "MODEL_NOT_AVAILABLE"
        }
      ],
      "validationChecks": [
        "multiple_validation_errors_collected",
        "error_aggregation_performed",
        "comprehensive_error_reporting"
      ]
    }
  },
  "serviceUnavailabilityScenarios": {
    "personality_service_down": {
      "name": "PersonalityService Unavailable Agent",
      "description": "Testing agent creation when PersonalityService is unavailable",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis"],
      "constraints": [],
      "settings": {},
      "tags": ["service-unavailable"],
      "simulatedFailures": {
        "personalityServiceDown": true,
        "roleServiceDown": false,
        "modelServiceDown": false
      },
      "expectedOutcome": "service_error",
      "expectedError": {
        "type": "ServiceUnavailableError",
        "service": "PersonalityService",
        "message": "PersonalityService is currently unavailable",
        "code": "SERVICE_UNAVAILABLE"
      },
      "expectedBehavior": "graceful_degradation_with_retry",
      "validationChecks": [
        "service_availability_check",
        "timeout_handling",
        "retry_mechanism_triggered"
      ]
    },
    "role_service_timeout": {
      "name": "RoleService Timeout Agent",
      "description": "Testing agent creation with RoleService timeout",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis"],
      "constraints": [],
      "settings": {},
      "tags": ["service-timeout"],
      "simulatedFailures": {
        "personalityServiceDown": false,
        "roleServiceTimeout": true,
        "modelServiceDown": false
      },
      "expectedOutcome": "timeout_error",
      "expectedError": {
        "type": "TimeoutError",
        "service": "RoleService",
        "message": "RoleService request timed out after 300ms",
        "code": "SERVICE_TIMEOUT"
      },
      "expectedBehavior": "timeout_handling_with_cleanup",
      "performanceRequirements": {
        "timeoutMs": 300,
        "retryAttempts": 2,
        "backoffMs": 100
      }
    },
    "partial_service_failure": {
      "name": "Partial Service Failure Agent",
      "description": "Testing resilience during partial service failures",
      "role": "generalist",
      "personalityId": "550e8400-e29b-41d4-a716-446655440102",
      "modelId": "claude-3-sonnet",
      "capabilities": ["general_assistance"],
      "constraints": [],
      "settings": {},
      "tags": ["partial-failure"],
      "simulatedFailures": {
        "personalityServiceDown": false,
        "roleServiceDown": false,
        "modelServiceTimeout": true,
        "validationServiceSlow": true
      },
      "expectedOutcome": "partial_success_or_timeout",
      "expectedBehavior": "graceful_degradation_with_fallback",
      "fallbackBehavior": {
        "useDefaultModel": true,
        "reduceValidationScope": true,
        "enableCaching": true
      }
    }
  },
  "performanceTestScenarios": {
    "complex_reference_validation": {
      "name": "Performance Test Agent",
      "description": "Agent with complex references for performance validation",
      "role": "complex-analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440103",
      "modelId": "gpt-4-32k",
      "capabilities": [
        "complex_analysis",
        "multi_modal_processing",
        "advanced_reasoning",
        "pattern_recognition",
        "predictive_modeling"
      ],
      "constraints": [
        "security_clearance",
        "audit_trail",
        "performance_optimization",
        "resource_limits",
        "compliance_validation"
      ],
      "settings": {
        "temperature": 0.7,
        "maxTokens": 4096,
        "topP": 0.9,
        "frequencyPenalty": 0.1,
        "presencePenalty": 0.1
      },
      "tags": ["performance-test", "complex-references"],
      "expectedOutcome": "success",
      "performanceRequirements": {
        "referenceValidationTimeMs": 300,
        "crossServiceCoordinationTimeMs": 500,
        "totalValidationTimeMs": 800,
        "memoryUsageMB": 100,
        "concurrentValidations": 5
      },
      "validationChecks": [
        "performance_requirements_met",
        "complex_reference_resolution",
        "resource_utilization_optimal",
        "concurrent_validation_support"
      ]
    },
    "concurrent_reference_batch": [
      {
        "name": "Concurrent Agent 1",
        "role": "analyst",
        "personalityId": "550e8400-e29b-41d4-a716-446655440101",
        "modelId": "gpt-4-turbo-preview",
        "capabilities": ["analysis"],
        "tags": ["concurrent", "batch-1"]
      },
      {
        "name": "Concurrent Agent 2",
        "role": "creative-director",
        "personalityId": "550e8400-e29b-41d4-a716-446655440102",
        "modelId": "claude-3-sonnet",
        "capabilities": ["creative_ideation"],
        "tags": ["concurrent", "batch-2"]
      },
      {
        "name": "Concurrent Agent 3",
        "role": "coach",
        "personalityId": "550e8400-e29b-41d4-a716-446655440103",
        "modelId": "gpt-4-analysis",
        "capabilities": ["coaching"],
        "tags": ["concurrent", "batch-3"]
      }
    ],
    "stress_test_reference_validation": {
      "name": "Stress Test Reference Agent",
      "description": "Template for generating multiple agents for reference validation stress testing",
      "role": "generalist",
      "personalityId": "550e8400-e29b-41d4-a716-446655440104",
      "modelId": "gpt-3.5-turbo",
      "capabilities": ["general_assistance"],
      "constraints": ["performance_optimized"],
      "settings": {
        "temperature": 0.5,
        "maxTokens": 1024
      },
      "tags": ["stress-test", "reference-validation"],
      "batchSize": 50,
      "expectedPerformance": {
        "referenceValidationTimeMs": 200,
        "memoryUsageMB": 50,
        "concurrentValidations": 10,
        "successRate": 0.99
      }
    }
  },
  "authorizationTestScenarios": {
    "authorized_reference_access": {
      "name": "Authorized Reference Access Agent",
      "description": "Agent with proper authorization to access referenced components",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440101",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis"],
      "constraints": ["authorized_access"],
      "settings": {},
      "tags": ["authorization", "valid-access"],
      "authorizationContext": {
        "userId": "user-550e8400-e29b-41d4-a716-446655440001",
        "permissions": ["READ_PERSONALITY", "READ_ROLE", "READ_MODEL"],
        "securityLevel": "standard"
      },
      "expectedOutcome": "success",
      "validationChecks": [
        "user_authorization_verified",
        "component_access_authorized",
        "security_context_maintained"
      ]
    },
    "unauthorized_personality_access": {
      "name": "Unauthorized Personality Access Agent",
      "description": "Agent attempting to access personality without proper authorization",
      "role": "analyst",
      "personalityId": "550e8400-e29b-41d4-a716-446655440105",
      "modelId": "gpt-4-turbo-preview",
      "capabilities": ["analysis"],
      "constraints": [],
      "settings": {},
      "tags": ["authorization", "unauthorized"],
      "authorizationContext": {
        "userId": "user-550e8400-e29b-41d4-a716-446655440002",
        "permissions": ["READ_ROLE", "READ_MODEL"],
        "securityLevel": "restricted"
      },
      "expectedOutcome": "authorization_error",
      "expectedError": {
        "type": "AuthorizationError",
        "field": "personalityId",
        "message": "User does not have permission to access this personality",
        "code": "INSUFFICIENT_PERMISSIONS"
      },
      "validationChecks": [
        "authorization_check_performed",
        "access_denied_appropriately",
        "security_violation_logged"
      ]
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Comprehensive reference validation scenarios for agent configuration cross-service testing",
    "lastUpdated": "2025-07-28T00:00:00.000Z",
    "categories": [
      "validCrossServiceReferences",
      "invalidReferenceScenarios",
      "serviceUnavailabilityScenarios",
      "performanceTestScenarios",
      "authorizationTestScenarios"
    ],
    "testingFramework": "Jest BDD Integration Tests",
    "usageInstructions": {
      "validCrossServiceReferences": "Use for positive test cases validating successful cross-service reference resolution",
      "invalidReferenceScenarios": "Use for negative test cases validating proper error handling for invalid references",
      "serviceUnavailabilityScenarios": "Use for resilience testing when dependent services are unavailable or slow",
      "performanceTestScenarios": "Use for performance validation and load testing of reference validation workflows",
      "authorizationTestScenarios": "Use for security testing of reference access control and permissions"
    },
    "dependencies": {
      "services": [
        "PersonalityService",
        "RoleService",
        "ModelService",
        "AgentService",
        "ValidationService",
        "AuthorizationService"
      ],
      "testFramework": "Jest",
      "mockFactories": [
        "PersonalityServiceMockFactory",
        "RoleServiceMockFactory",
        "ModelServiceMockFactory",
        "AuthorizationServiceMockFactory"
      ]
    },
    "performanceBaselines": {
      "referenceValidationTimeMs": 300,
      "crossServiceCoordinationTimeMs": 500,
      "totalValidationTimeMs": 800,
      "concurrentValidationLimit": 10
    },
    "uuidRanges": {
      "personalities": "550e8400-e29b-41d4-a716-4466554401XX",
      "agents": "550e8400-e29b-41d4-a716-4466554402XX",
      "users": "550e8400-e29b-41d4-a716-4466554400XX"
    }
  }
}
