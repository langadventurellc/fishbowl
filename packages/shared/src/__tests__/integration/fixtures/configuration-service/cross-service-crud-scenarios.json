{
  "validCrossServiceScenarios": {
    "createAgentWithPersonalityAndRole": {
      "description": "Create agent configuration with valid personality and role references",
      "personality": {
        "id": "personality-technical-analytical",
        "name": "Technical Analytical",
        "description": "High analytical depth with technical focus",
        "openness": 75,
        "conscientiousness": 85,
        "extraversion": 45,
        "agreeableness": 65,
        "neuroticism": 25,
        "formality": 70,
        "humor": 40,
        "assertiveness": 80,
        "empathy": 60,
        "storytelling": 30,
        "brevity": 75,
        "imagination": 60,
        "playfulness": 35,
        "dramaticism": 20,
        "analyticalDepth": 95,
        "contrarianism": 45,
        "encouragement": 70,
        "curiosity": 85,
        "patience": 80,
        "isTemplate": false
      },
      "role": {
        "id": "technical-architect",
        "name": "Technical Architect",
        "description": "Designs and oversees technical system architecture",
        "capabilities": [
          "system-design",
          "architecture-review",
          "technical-leadership",
          "technology-evaluation"
        ],
        "constraints": [
          "technical-domain-only",
          "scalability-focus",
          "performance-aware"
        ],
        "isTemplate": true
      },
      "agent": {
        "name": "Senior Technical Architect",
        "description": "Expert system architect with analytical approach",
        "personalityId": "personality-technical-analytical",
        "role": "technical-architect",
        "modelId": "gpt-4-turbo",
        "capabilities": ["system-design", "architecture-review"],
        "constraints": ["technical-domain-only"],
        "settings": {
          "temperature": 0.4,
          "maxTokens": 3000,
          "topP": 0.85
        },
        "tags": ["technical", "architect", "senior"]
      },
      "expectedOutcome": "success"
    },
    "updatePersonalityReferencedByAgent": {
      "description": "Update personality that is referenced by existing agents",
      "existingPersonality": {
        "id": "personality-creative-leader",
        "name": "Creative Leadership",
        "openness": 85,
        "conscientiousness": 70,
        "extraversion": 80,
        "agreeableness": 75,
        "neuroticism": 30,
        "isTemplate": false
      },
      "referencingAgents": [
        {
          "id": "agent-creative-director-1",
          "name": "Creative Director Alpha",
          "personalityId": "personality-creative-leader",
          "role": "creative-director"
        },
        {
          "id": "agent-creative-director-2",
          "name": "Creative Director Beta",
          "personalityId": "personality-creative-leader",
          "role": "creative-director"
        }
      ],
      "personalityUpdate": {
        "name": "Enhanced Creative Leadership",
        "description": "Updated description with enhanced creative traits",
        "imagination": 90
      },
      "expectedOutcome": "success"
    },
    "deleteRoleWithDependentAgents": {
      "description": "Attempt to delete role that has dependent agent configurations",
      "roleToDelete": {
        "id": "role-project-manager",
        "name": "Project Manager",
        "isTemplate": false
      },
      "dependentAgents": [
        {
          "id": "agent-pm-alpha",
          "name": "Project Manager Alpha",
          "role": "role-project-manager"
        },
        {
          "id": "agent-pm-beta",
          "name": "Project Manager Beta",
          "role": "role-project-manager"
        }
      ],
      "expectedOutcome": "referential_integrity_error",
      "expectedError": {
        "code": "REFERENTIAL_INTEGRITY_VIOLATION",
        "message": "Cannot delete role: 2 agents depend on this role"
      }
    }
  },
  "crossServiceValidationScenarios": {
    "createAgentWithInvalidPersonalityId": {
      "description": "Create agent with non-existent personality ID",
      "agentRequest": {
        "name": "Invalid Personality Agent",
        "description": "Agent with invalid personality reference",
        "personalityId": "personality-does-not-exist",
        "role": "generalist",
        "modelId": "gpt-4-turbo"
      },
      "expectedOutcome": "validation_error",
      "expectedError": {
        "code": "INVALID_REFERENCE",
        "field": "personalityId",
        "message": "Referenced personality 'personality-does-not-exist' does not exist"
      }
    },
    "createAgentWithInvalidRoleId": {
      "description": "Create agent with non-existent role ID",
      "agentRequest": {
        "name": "Invalid Role Agent",
        "description": "Agent with invalid role reference",
        "personalityId": "personality-balanced",
        "role": "role-does-not-exist",
        "modelId": "gpt-4-turbo"
      },
      "expectedOutcome": "validation_error",
      "expectedError": {
        "code": "INVALID_REFERENCE",
        "field": "role",
        "message": "Referenced role 'role-does-not-exist' does not exist"
      }
    },
    "createAgentWithBothInvalidReferences": {
      "description": "Create agent with both invalid personality and role references",
      "agentRequest": {
        "name": "Multiple Invalid References Agent",
        "description": "Agent with multiple invalid references",
        "personalityId": "personality-invalid",
        "role": "role-invalid",
        "modelId": "gpt-4-turbo"
      },
      "expectedOutcome": "validation_error",
      "expectedErrors": [
        {
          "code": "INVALID_REFERENCE",
          "field": "personalityId",
          "message": "Referenced personality 'personality-invalid' does not exist"
        },
        {
          "code": "INVALID_REFERENCE",
          "field": "role",
          "message": "Referenced role 'role-invalid' does not exist"
        }
      ]
    }
  },
  "performanceTestingScenarios": {
    "batchAgentCreation": {
      "description": "Batch creation of multiple agents with cross-service coordination",
      "agentRequests": [
        {
          "name": "Batch Agent 1",
          "personalityId": "personality-analytical",
          "role": "analyst",
          "modelId": "gpt-4-turbo"
        },
        {
          "name": "Batch Agent 2",
          "personalityId": "personality-creative",
          "role": "creative-director",
          "modelId": "claude-3-sonnet"
        },
        {
          "name": "Batch Agent 3",
          "personalityId": "personality-balanced",
          "role": "generalist",
          "modelId": "gpt-3.5-turbo"
        }
      ],
      "performanceRequirements": {
        "maxTotalTime": 3000,
        "maxIndividualTime": 1000,
        "maxCrossServiceTime": 200
      },
      "expectedOutcome": "success"
    },
    "concurrentCrossServiceOperations": {
      "description": "Concurrent operations across multiple services",
      "operations": [
        {
          "type": "createPersonality",
          "data": {
            "name": "Concurrent Personality 1",
            "openness": 60,
            "conscientiousness": 70
          }
        },
        {
          "type": "createRole",
          "data": {
            "name": "Concurrent Role 1",
            "capabilities": ["leadership"]
          }
        },
        {
          "type": "createAgent",
          "data": {
            "name": "Concurrent Agent 1",
            "personalityId": "existing-personality",
            "role": "existing-role"
          }
        }
      ],
      "concurrencyLevel": 3,
      "expectedOutcome": "success"
    }
  },
  "metadata": {
    "version": "1.0.0",
    "description": "Cross-service CRUD operation test scenarios for ConfigurationService",
    "lastUpdated": "2025-07-28T00:00:00.000Z",
    "categories": [
      "validCrossServiceScenarios",
      "crossServiceValidationScenarios",
      "performanceTestingScenarios"
    ],
    "testingFocus": [
      "cross_service_coordination",
      "referential_integrity",
      "validation_across_services",
      "performance_under_load"
    ]
  }
}
