{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "mcp__task-trellis__completeTask",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'cd \"$(git rev-parse --show-toplevel)\" && .claude/hooks/pre-complete-task.sh'"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write|delete_lines|insert_after_symbol|insert_at_line|insert_before_symbol|replace_text|replace_lines|replace_line|replace_regex|replace_symbol_body",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'cd \"$(git rev-parse --show-toplevel)\" && .claude/hooks/post-edit-task.sh'"
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Bash(pnpm turbo lint:*)",
      "Bash(pnpm turbo build:*)",
      "Bash(pnpm turbo run test:*)",
      "Bash(pnpm build:*)",
      "Bash(pnpm lint:*)",
      "WebFetch(domain:v2.tauri.app)",
      "Bash(pnpm test:*)",
      "Bash(rustup:*)",
      "Bash(cargo --version)",
      "Bash(rustc:*)",
      "Bash(pnpm run:*)",
      "Bash(cargo:*)",
      "Bash(echo $PATH)",
      "Bash(pnpm container:setup:*)",
      "Bash(pnpm list:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm search:*)",
      "Bash(pnpm install:*)",
      "Bash(npm view:*)",
      "Bash(npx electron:*)",
      "Bash(pnpm approve-builds:*)",
      "Bash(tsc --noEmit)",
      "Bash(pnpm format:*)",
      "Bash(pnpm exec:*)",
      "Bash(pnpm rebuild:*)",
      "Bash(pnpm quality:*)",
      "Bash(pnpm -w run quality)",
      "Bash(pnpm turbo:*)",
      "mcp__circleci-mcp-server__config_helper",
      "Bash(pnpm ls:*)",
      "Bash(pnpm update:*)",
      "Bash(git tag:*)",
      "Bash(pnpm dev:*)",
      "Bash(pnpm type-check:*)",
      "Bash(pnpm clean:*)",
      "Bash(pnpm prebuild:*)",
      "WebFetch(domain:stackoverflow.com)",
      "WebFetch(domain:docs.expo.dev)",
      "Bash(detox build:*)",
      "Bash(npx detox build:*)",
      "Bash(pnpm -w run dev:mobile)",
      "Bash(rm:*)",
      "Bash(npx expo start:*)",
      "Bash(EXPO_USE_COMMUNITY_AUTOLINKING=1 NODE_ENV=development ./gradlew assembleDebug -x lint)",
      "Bash(EXPO_USE_COMMUNITY_AUTOLINKING=1 NODE_ENV=development ./gradlew assembleAndroidTest -DtestBuildType=debug)",
      "Bash(pnpm:*)",
      "Bash(expo prebuild:*)",
      "Bash(npx expo prebuild:*)",
      "WebFetch(domain:ui.shadcn.com)",
      "mcp__shadcn-ui__list_components",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__find_symbol",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__write_memory",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__replace_regex",
      "mcp__serena__read_memory",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__get_current_config",
      "mcp__shadcn-ui__get_component",
      "mcp__shadcn-ui__get_component_demo",
      "Bash(npx shadcn@latest add:*)",
      "mcp__shadcn-ui__get_component_metadata"
    ],
    "deny": ["Bash(pnpm dev:*)", "Bash(pnpm start:*)", "Bash(npm *)"]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": ["task-trellis"]
}
